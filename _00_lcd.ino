/* ----------------------------------------------------------------------------------------------------
 * Constant values
 * ---------------------------------------------------------------------------------------------------- */
#define D_LCD_ADDR	0x3c							// SSD1306 I2C address

/* ----------------------------------------------------------------------------------------------------
 * Global variables
 * ---------------------------------------------------------------------------------------------------- */
const uint8_t G_ary_lcd_contrast[] = { 64, 127, 255 };				// The LCD Brightness, what could be cycled through(Change this for other settings depending on what you like)

/*
 * generated by LCD Assistant
 * http://en.radzio.dxp.pl/bitmap_converter/
 */

const uint8_t G_ary_lcd_icon_16x16[][32] = {
	{
		// checked
		0xF8, 0xFC, 0x0C, 0x86, 0xC6, 0xC6, 0x86, 0x82, 0x80, 0xC0, 0xE0, 0x30, 0x18, 0x00, 0x00, 0x00,
		0x3F, 0x7F, 0xE0, 0xC0, 0xC1, 0xC3, 0xC7, 0xCF, 0xC7, 0xC1, 0xC0, 0xC0, 0xE0, 0x7E, 0x3F, 0x00
	},
	{
		// un-checked
		0xF8, 0xFC, 0x0C, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x0C, 0xFC, 0xF8, 0x00,
		0x3F, 0x7F, 0xE0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0x7F, 0x3F, 0x00
	},
	{
		// fire
		0x00, 0x00, 0x00, 0x80, 0xC0, 0xF0, 0xF0, 0xFF, 0xFC, 0xF0, 0xE0, 0x80, 0x80, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x1E, 0x7C, 0xDF, 0x87, 0x07, 0x07, 0x03, 0x83, 0xFF, 0x7F, 0x3F, 0x00, 0x00, 0x00
	},
	{
		// phone - off hook
		0x00, 0x18, 0xFC, 0xFE, 0xFC, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x0C, 0x1C, 0x38, 0x38, 0x7C, 0x7C, 0x7C, 0x38, 0x18, 0x00
	},
	{
		// phone - on hook
		0x00, 0x00, 0x00, 0x80, 0xE0, 0xF0, 0x30, 0x38, 0x1C, 0x1C, 0x3C, 0x3E, 0x1E, 0x1C, 0x08, 0x00,
		0x00, 0x1C, 0x3F, 0x7F, 0x7F, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	},
	{
		// key
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xE3, 0xC3, 0xE6, 0xFC, 0x70,
		0xE0, 0xF0, 0xF8, 0x7C, 0x3E, 0x1F, 0x0F, 0x07, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00
	},
	{
		// light ball
		0x00, 0x00, 0x00, 0xE0, 0xF8, 0x18, 0x0C, 0x0D, 0x0C, 0x18, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x04, 0x03, 0x3F, 0x6E, 0xEC, 0x6E, 0x3F, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00
	},
	{
		// message
		0xE0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0xFC, 0xFE, 0xFE, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xC0,
		0x03, 0x07, 0x0F, 0x1F, 0x1F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x77, 0x41
	},
	{
		// music
		0xFC, 0xFC, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0x06, 0xCE, 0xDE, 0xBE, 0xFE, 0xFE, 0xFC, 0xF8, 0x00,
		0x7F, 0xFF, 0xFF, 0xE7, 0xC7, 0xC7, 0xC7, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00
	},
	{
		// vol - mute
		0x00, 0x00, 0x80, 0x80, 0x80, 0xC0, 0xC0, 0x60, 0x00, 0x80, 0x40, 0xA0, 0x10, 0x08, 0x04, 0x02,
		0x00, 0x87, 0x4F, 0x27, 0x13, 0x09, 0x14, 0x32, 0x01, 0x00, 0x10, 0x1F, 0x07, 0x00, 0x00, 0x00
	},
	{
		// vol - up
		0xE0, 0xE0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF8, 0x00, 0x00, 0x10, 0xF0, 0xC2, 0x06, 0x0C, 0xF8, 0xE0,
		0x03, 0x03, 0x03, 0x03, 0x07, 0x07, 0x0F, 0x00, 0x00, 0x04, 0x07, 0x21, 0x70, 0x3C, 0x0F, 0x03
	},
	{
		// vol - down
		0x00, 0x00, 0x00, 0xC0, 0xE0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF8, 0x00, 0x20, 0xC0, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x07, 0x0F, 0x0F, 0x00, 0x03, 0x01, 0x00, 0x00, 0x00
	},
	{
		// stop
		0x80, 0xE0, 0xF8, 0x78, 0x7C, 0x7C, 0x7E, 0x7E, 0x7E, 0x7C, 0x7C, 0x78, 0xF8, 0xE0, 0xC0, 0x00,
		0x03, 0x0F, 0x3F, 0x3C, 0x7C, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x7C, 0x3C, 0x3F, 0x0F, 0x07, 0x00
	},
	{
		// warning
		0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0x1C, 0x1C, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x40, 0x60, 0x78, 0x7E, 0x7F, 0x7F, 0x7F, 0x48, 0x48, 0x7F, 0x7F, 0x7F, 0x7E, 0x78, 0x60, 0x00
	}
};

/*
 * src: http://gammon.com.au/forum/?id=10940
 */
const uint8_t G_ary_lcd_fnt_8x8[][8] = {
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },			// 0x00
	{ 0x7E, 0x81, 0x95, 0xB1, 0xB1, 0x95, 0x81, 0x7E },			// 0x01
	{ 0x7E, 0xFF, 0xEB, 0xCF, 0xCF, 0xEB, 0xFF, 0x7E },			// 0x02
	{ 0x0E, 0x1F, 0x3F, 0x7E, 0x3F, 0x1F, 0x0E, 0x00 },			// 0x03
	{ 0x08, 0x1C, 0x3E, 0x7F, 0x3E, 0x1C, 0x08, 0x00 },			// 0x04
	{ 0x18, 0xBA, 0xFF, 0xFF, 0xFF, 0xBA, 0x18, 0x00 },			// 0x05
	{ 0x10, 0xB8, 0xFC, 0xFF, 0xFC, 0xB8, 0x10, 0x00 },			// 0x06
	{ 0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00 },			// 0x07
	{ 0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF },			// 0x08
	{ 0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00 },			// 0x09
	{ 0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF },			// 0x0A
	{ 0x70, 0xF8, 0x88, 0x88, 0xFD, 0x7F, 0x07, 0x0F },			// 0x0B
	{ 0x00, 0x4E, 0x5F, 0xF1, 0xF1, 0x5F, 0x4E, 0x00 },			// 0x0C
	{ 0xC0, 0xE0, 0xFF, 0x7F, 0x05, 0x05, 0x07, 0x07 },			// 0x0D
	{ 0xC0, 0xFF, 0x7F, 0x05, 0x05, 0x65, 0x7F, 0x3F },			// 0x0E
	{ 0x99, 0x5A, 0x3C, 0xE7, 0xE7, 0x3C, 0x5A, 0x99 },			// 0x0F
	{ 0x7F, 0x3E, 0x3E, 0x1C, 0x1C, 0x08, 0x08, 0x00 },			// 0x10
	{ 0x08, 0x08, 0x1C, 0x1C, 0x3E, 0x3E, 0x7F, 0x00 },			// 0x11
	{ 0x00, 0x24, 0x66, 0xFF, 0xFF, 0x66, 0x24, 0x00 },			// 0x12
	{ 0x00, 0x5F, 0x5F, 0x00, 0x00, 0x5F, 0x5F, 0x00 },			// 0x13
	{ 0x06, 0x0F, 0x09, 0x7F, 0x7F, 0x01, 0x7F, 0x7F },			// 0x14
	{ 0x40, 0xDA, 0xBF, 0xA5, 0xFD, 0x59, 0x03, 0x02 },			// 0x15
	{ 0x00, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x00 },			// 0x16
	{ 0x80, 0x94, 0xB6, 0xFF, 0xFF, 0xB6, 0x94, 0x80 },			// 0x17
	{ 0x00, 0x04, 0x06, 0x7F, 0x7F, 0x06, 0x04, 0x00 },			// 0x18
	{ 0x00, 0x10, 0x30, 0x7F, 0x7F, 0x30, 0x10, 0x00 },			// 0x19
	{ 0x08, 0x08, 0x08, 0x2A, 0x3E, 0x1C, 0x08, 0x00 },			// 0x1A
	{ 0x08, 0x1C, 0x3E, 0x2A, 0x08, 0x08, 0x08, 0x00 },			// 0x1B
	{ 0x3C, 0x3C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00 },			// 0x1C
	{ 0x08, 0x1C, 0x3E, 0x08, 0x08, 0x3E, 0x1C, 0x08 },			// 0x1D
	{ 0x30, 0x38, 0x3C, 0x3E, 0x3E, 0x3C, 0x38, 0x30 },			// 0x1E
	{ 0x06, 0x0E, 0x1E, 0x3E, 0x3E, 0x1E, 0x0E, 0x06 },			// 0x1F
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },			// ' '
	{ 0x00, 0x06, 0x5F, 0x5F, 0x06, 0x00, 0x00, 0x00 },			// '!'
	{ 0x00, 0x07, 0x07, 0x00, 0x07, 0x07, 0x00, 0x00 },			// '"'
	{ 0x14, 0x7F, 0x7F, 0x14, 0x7F, 0x7F, 0x14, 0x00 },			// '#'
	{ 0x24, 0x2E, 0x6B, 0x6B, 0x3A, 0x12, 0x00, 0x00 },			// '$'
	{ 0x46, 0x66, 0x30, 0x18, 0x0C, 0x66, 0x62, 0x00 },			// '%'
	{ 0x30, 0x7A, 0x4F, 0x5D, 0x37, 0x7A, 0x48, 0x00 },			// '&'
	{ 0x04, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 },			// '''
	{ 0x00, 0x1C, 0x3E, 0x63, 0x41, 0x00, 0x00, 0x00 },			// '('
	{ 0x00, 0x41, 0x63, 0x3E, 0x1C, 0x00, 0x00, 0x00 },			// ')'
	{ 0x08, 0x2A, 0x3E, 0x1C, 0x1C, 0x3E, 0x2A, 0x08 },			// '*'
	{ 0x08, 0x08, 0x3E, 0x3E, 0x08, 0x08, 0x00, 0x00 },			// '+'
	{ 0x00, 0x80, 0xE0, 0x60, 0x00, 0x00, 0x00, 0x00 },			// ','
	{ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00 },			// '-'
	{ 0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00 },			// '.'
	{ 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00 },			// '/'
	{ 0x3E, 0x7F, 0x71, 0x59, 0x4D, 0x7F, 0x3E, 0x00 },			// '0'
	{ 0x40, 0x42, 0x7F, 0x7F, 0x40, 0x40, 0x00, 0x00 },			// '1'
	{ 0x62, 0x73, 0x59, 0x49, 0x6F, 0x66, 0x00, 0x00 },			// '2'
	{ 0x22, 0x63, 0x49, 0x49, 0x7F, 0x36, 0x00, 0x00 },			// '3'
	{ 0x18, 0x1C, 0x16, 0x53, 0x7F, 0x7F, 0x50, 0x00 },			// '4'
	{ 0x27, 0x67, 0x45, 0x45, 0x7D, 0x39, 0x00, 0x00 },			// '5'
	{ 0x3C, 0x7E, 0x4B, 0x49, 0x79, 0x30, 0x00, 0x00 },			// '6'
	{ 0x03, 0x03, 0x71, 0x79, 0x0F, 0x07, 0x00, 0x00 },			// '7'
	{ 0x36, 0x7F, 0x49, 0x49, 0x7F, 0x36, 0x00, 0x00 },			// '8'
	{ 0x06, 0x4F, 0x49, 0x69, 0x3F, 0x1E, 0x00, 0x00 },			// '9'
	{ 0x00, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00 },			// ':'
	{ 0x00, 0x80, 0xE6, 0x66, 0x00, 0x00, 0x00, 0x00 },			// ';'
	{ 0x08, 0x1C, 0x36, 0x63, 0x41, 0x00, 0x00, 0x00 },			// '<'
	{ 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x00, 0x00 },			// '='
	{ 0x00, 0x41, 0x63, 0x36, 0x1C, 0x08, 0x00, 0x00 },			// '>'
	{ 0x02, 0x03, 0x51, 0x59, 0x0F, 0x06, 0x00, 0x00 },			// '?'
	{ 0x3E, 0x7F, 0x41, 0x5D, 0x5D, 0x1F, 0x1E, 0x00 },			// '@'
	{ 0x7C, 0x7E, 0x13, 0x13, 0x7E, 0x7C, 0x00, 0x00 },			// 'A'
	{ 0x41, 0x7F, 0x7F, 0x49, 0x49, 0x7F, 0x36, 0x00 },			// 'B'
	{ 0x1C, 0x3E, 0x63, 0x41, 0x41, 0x63, 0x22, 0x00 },			// 'C'
	{ 0x41, 0x7F, 0x7F, 0x41, 0x63, 0x3E, 0x1C, 0x00 },			// 'D'
	{ 0x41, 0x7F, 0x7F, 0x49, 0x5D, 0x41, 0x63, 0x00 },			// 'E'
	{ 0x41, 0x7F, 0x7F, 0x49, 0x1D, 0x01, 0x03, 0x00 },			// 'F'
	{ 0x1C, 0x3E, 0x63, 0x41, 0x51, 0x73, 0x72, 0x00 },			// 'G'
	{ 0x7F, 0x7F, 0x08, 0x08, 0x7F, 0x7F, 0x00, 0x00 },			// 'H'
	{ 0x00, 0x41, 0x7F, 0x7F, 0x41, 0x00, 0x00, 0x00 },			// 'I'
	{ 0x30, 0x70, 0x40, 0x41, 0x7F, 0x3F, 0x01, 0x00 },			// 'J'
	{ 0x41, 0x7F, 0x7F, 0x08, 0x1C, 0x77, 0x63, 0x00 },			// 'K'
	{ 0x41, 0x7F, 0x7F, 0x41, 0x40, 0x60, 0x70, 0x00 },			// 'L'
	{ 0x7F, 0x7F, 0x0E, 0x1C, 0x0E, 0x7F, 0x7F, 0x00 },			// 'M'
	{ 0x7F, 0x7F, 0x06, 0x0C, 0x18, 0x7F, 0x7F, 0x00 },			// 'N'
	{ 0x1C, 0x3E, 0x63, 0x41, 0x63, 0x3E, 0x1C, 0x00 },			// 'O'
	{ 0x41, 0x7F, 0x7F, 0x49, 0x09, 0x0F, 0x06, 0x00 },			// 'P'
	{ 0x1E, 0x3F, 0x21, 0x71, 0x7F, 0x5E, 0x00, 0x00 },			// 'Q'
	{ 0x41, 0x7F, 0x7F, 0x09, 0x19, 0x7F, 0x66, 0x00 },			// 'R'
	{ 0x26, 0x6F, 0x4D, 0x59, 0x73, 0x32, 0x00, 0x00 },			// 'S'
	{ 0x03, 0x41, 0x7F, 0x7F, 0x41, 0x03, 0x00, 0x00 },			// 'T'
	{ 0x7F, 0x7F, 0x40, 0x40, 0x7F, 0x7F, 0x00, 0x00 },			// 'U'
	{ 0x1F, 0x3F, 0x60, 0x60, 0x3F, 0x1F, 0x00, 0x00 },			// 'V'
	{ 0x7F, 0x7F, 0x30, 0x18, 0x30, 0x7F, 0x7F, 0x00 },			// 'W'
	{ 0x43, 0x67, 0x3C, 0x18, 0x3C, 0x67, 0x43, 0x00 },			// 'X'
	{ 0x07, 0x4F, 0x78, 0x78, 0x4F, 0x07, 0x00, 0x00 },			// 'Y'
	{ 0x47, 0x63, 0x71, 0x59, 0x4D, 0x67, 0x73, 0x00 },			// 'Z'
	{ 0x00, 0x7F, 0x7F, 0x41, 0x41, 0x00, 0x00, 0x00 },			// '['
	{ 0x01, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00 },			// backslash
	{ 0x00, 0x41, 0x41, 0x7F, 0x7F, 0x00, 0x00, 0x00 },			// ']'
	{ 0x08, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x08, 0x00 },			// '^'
	{ 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 },			// '_'
	{ 0x00, 0x00, 0x03, 0x07, 0x04, 0x00, 0x00, 0x00 },			// '`'
	{ 0x20, 0x74, 0x54, 0x54, 0x3C, 0x78, 0x40, 0x00 },			// 'a'
	{ 0x41, 0x7F, 0x3F, 0x48, 0x48, 0x78, 0x30, 0x00 },			// 'b'
	{ 0x38, 0x7C, 0x44, 0x44, 0x6C, 0x28, 0x00, 0x00 },			// 'c'
	{ 0x30, 0x78, 0x48, 0x49, 0x3F, 0x7F, 0x40, 0x00 },			// 'd'
	{ 0x38, 0x7C, 0x54, 0x54, 0x5C, 0x18, 0x00, 0x00 },			// 'e'
	{ 0x48, 0x7E, 0x7F, 0x49, 0x03, 0x02, 0x00, 0x00 },			// 'f'
	{ 0x98, 0xBC, 0xA4, 0xA4, 0xF8, 0x7C, 0x04, 0x00 },			// 'g'
	{ 0x41, 0x7F, 0x7F, 0x08, 0x04, 0x7C, 0x78, 0x00 },			// 'h'
	{ 0x00, 0x44, 0x7D, 0x7D, 0x40, 0x00, 0x00, 0x00 },			// 'i'
	{ 0x60, 0xE0, 0x80, 0x80, 0xFD, 0x7D, 0x00, 0x00 },			// 'j'
	{ 0x41, 0x7F, 0x7F, 0x10, 0x38, 0x6C, 0x44, 0x00 },			// 'k'
	{ 0x00, 0x41, 0x7F, 0x7F, 0x40, 0x00, 0x00, 0x00 },			// 'l'
	{ 0x7C, 0x7C, 0x18, 0x38, 0x1C, 0x7C, 0x78, 0x00 },			// 'm'
	{ 0x7C, 0x7C, 0x04, 0x04, 0x7C, 0x78, 0x00, 0x00 },			// 'n'
	{ 0x38, 0x7C, 0x44, 0x44, 0x7C, 0x38, 0x00, 0x00 },			// 'o'
	{ 0x84, 0xFC, 0xF8, 0xA4, 0x24, 0x3C, 0x18, 0x00 },			// 'p'
	{ 0x18, 0x3C, 0x24, 0xA4, 0xF8, 0xFC, 0x84, 0x00 },			// 'q'
	{ 0x44, 0x7C, 0x78, 0x4C, 0x04, 0x1C, 0x18, 0x00 },			// 'r'
	{ 0x48, 0x5C, 0x54, 0x54, 0x74, 0x24, 0x00, 0x00 },			// 's'
	{ 0x00, 0x04, 0x3E, 0x7F, 0x44, 0x24, 0x00, 0x00 },			// 't'
	{ 0x3C, 0x7C, 0x40, 0x40, 0x3C, 0x7C, 0x40, 0x00 },			// 'u'
	{ 0x1C, 0x3C, 0x60, 0x60, 0x3C, 0x1C, 0x00, 0x00 },			// 'v'
	{ 0x3C, 0x7C, 0x70, 0x38, 0x70, 0x7C, 0x3C, 0x00 },			// 'w'
	{ 0x44, 0x6C, 0x38, 0x10, 0x38, 0x6C, 0x44, 0x00 },			// 'x'
	{ 0x9C, 0xBC, 0xA0, 0xA0, 0xFC, 0x7C, 0x00, 0x00 },			// 'y'
	{ 0x4C, 0x64, 0x74, 0x5C, 0x4C, 0x64, 0x00, 0x00 },			// 'z'
	{ 0x08, 0x08, 0x3E, 0x77, 0x41, 0x41, 0x00, 0x00 },			// '{'
	{ 0x00, 0x00, 0x00, 0x77, 0x77, 0x00, 0x00, 0x00 },			// '|'
	{ 0x41, 0x41, 0x77, 0x3E, 0x08, 0x08, 0x00, 0x00 },			// '}'
	{ 0x02, 0x03, 0x01, 0x03, 0x02, 0x03, 0x01, 0x00 }  			// '~'
};

const uint8_t G_ary_lcd_dot[][8] = {
	{ 192, 0, 0, 0, 0, 0, 0, 192 },						// only 2 dots
	{ 192, 0, 0, 16, 16, 16, 0, 192 },					// the 2 dots with a minus
	{ 192, 0, 16, 56, 16, 0, 0, 192 },					// the 2 dots with a plus
	{ 126, 255, 255, 255, 255, 255, 255, 126 }				// thats a block with little rounded edges
};

const uint8_t G_ary_lcd_hbar[][8] = {
	{ 255, 255, 255, 255, 255, 255, 255, 255 },				// 8 line
	{ 255, 0, 0, 0, 0, 0, 0, 0 },						// 1 line
	{ 255, 255, 0, 0, 0, 0, 0, 0 },						// 2 line
	{ 255, 255, 255, 0, 0, 0, 0, 0 },					// 3 line
	{ 255, 255, 255, 255, 0, 0, 0, 0 },					// 4 line
	{ 255, 255, 255, 255, 255, 0, 0, 0 },					// 5 line
	{ 255, 255, 255, 255, 255, 255, 0, 0 },					// 6 line
	{ 255, 255, 255, 255, 255, 255, 255, 0 }				// 7 line
};

const uint8_t G_ary_lcd_vbar[][8] = {
	{ 128, 128, 128, 128, 128, 128, 128, 128 },				// 1 rows
	{ 192, 192, 192, 192, 192, 192, 192, 192 },				// 2 rows
	{ 224, 224, 224, 224, 224, 224, 224, 224 },				// 3 rows
	{ 240, 240, 240, 240, 240, 240, 240, 240 },				// 4 rows
	{ 248, 248, 248, 248, 248, 248, 248, 248 },				// 5 rows
	{ 252, 252, 252, 252, 252, 252, 252, 252 },				// 6 rows
	{ 254, 254, 254, 254, 254, 254, 254, 254 },				// 7 rows
	{ 255, 255, 255, 255, 255, 255, 255, 255 }				// 8 rows
};

const uint8_t G_ary_lcd_bat[][8] = {
	{ 254, 131, 131, 130, 130, 131, 131, 254 },				// 50%
	{ 254, 195, 195, 194, 194, 195, 195, 254 },				// 60%
	{ 254, 227, 227, 226, 226, 227, 227, 254 },				// 70%
	{ 254, 243, 243, 242, 242, 243, 243, 254 },				// 80%
	{ 254, 251, 251, 250, 250, 251, 251, 254 },				// 90%
	{ 254, 255, 255, 254, 254, 255, 255, 254 }				// 100%
};

const uint8_t G_ary_lcd_icon_8x8[][8] = {
	{ 0, 254, 249, 201, 249, 254, 161, 62 },				// Fuel station
	{ 0, 96, 158, 149, 129, 158, 96, 0 },					// temperature
	{ 0, 14, 31, 248, 248, 31, 14, 0 },					// service engine
	{ 12, 18, 12, 60, 68, 130, 130, 68 },					// degree C symbol
	{ 128, 200, 108, 126, 63, 27, 25, 9 },					// electric symbol
	{ 128, 65, 33, 22, 24, 96, 128, 64 }					// lambda symbol
};

/** **************************************************************************************************************
 * 初始化 SSD1306 controller
 *
 * 注意!
 * 目前購買的 2.36" OLED module 蠻耗電的! 12V 端約需要 200mA 左右的電流, Power Reg. IC 得注意供電電流
 */
void lcd_init(void)
{
	uint8_t x = 0;
	uint8_t ary_init[] = {
		0xae,								/* set display off(sleep mode) */
		0xd3, 0x00,							/* set display offset */
		0x40,								/* display start line(no remap) */
		0x8d, 0x14,							/* enable charge pump regulator - charge pump setting (p62): 0x14 enable, 0x10 disable */
		0x20, 0x00,							/* mode */
		0xa0,								/* set segment re-map a0/a1 */
		0xc0,								/* set COM output scan direction - c0: scan dir normal, c8: reverse */
		0xda, 0x12,							/* set COM pins hardware configuration, sequential com pin config (bit 4), disable left/right remap (bit 5) */
		0x81, 0xcf,							/* set contrast control */
		0xd9, 0xf1,							/* pre-charge period */
		0xdb, 0x40,							/* adjusts the VCOMH regulator output - vcomh deselect level */
		0x2e,								/* deactivate scroll */
		0xa4,								/* A5h command forces the entire display to be “ON”, regardless of the contents of the display data RAM. */
		0xa6,								/* none-inverted normal display mode */
		0xaf,								/* set display on */

		0xff
	};

	Wire.beginTransmission(D_LCD_ADDR);					// begin transmitting

	for (; ary_init[x] != 0xff; x++)
	{
		Wire.write(ary_init[x]);
	}

	if (Wire.endTransmission(I2C_STOP, D_I2C_TIMEOUT) == 0)			// *** success transmitting?
	{
		Wire.finish();							// loops until Tx/Rx is complete

		lcd_contrast(G_ary_lcd_contrast[G_status.scr_contrast]);	// set contrast
	}
	else									// *** timeout
	{
		lcd_error("lcd_init");
	}
}

/** **************************************************************************************************************
 * Send command AEh for display OFF.
 */
void lcd_shutdown(void)
{
	lcd_cmd(0xae);								// set display off(sleep mode)
}

/** **************************************************************************************************************
 * 送出控制指令
 *
 * @param	uint8_t			cmd				command
 */
void lcd_cmd(const uint8_t cmd)
{
	Wire.beginTransmission(D_LCD_ADDR);					// begin transmitting

	Wire.write(0x80);							// command mode
	Wire.write(cmd);

	if (Wire.endTransmission(I2C_STOP, D_I2C_TIMEOUT) == 0)			// *** success transmitting?
	{
		Wire.finish();							// loops until Tx/Rx is complete
	}
	else									// *** timeout
	{
		lcd_error("lcd_cmd");
	}
}

/** **************************************************************************************************************
 * 設定明暗度
 *
 * @param	char			lvl				明暗值(0 ~ 255)
 */
void lcd_contrast(const uint8_t lvl)
{
	Wire.beginTransmission(D_LCD_ADDR);					// begin transmitting

	Wire.write(0x80);							// command mode
	Wire.write(0x81);
	Wire.write(lvl);

	if (Wire.endTransmission(I2C_STOP, D_I2C_TIMEOUT) == 0)			// *** success transmitting?
	{
		Wire.finish();							// loops until Tx/Rx is complete
	}
	else									// *** timeout
	{
		lcd_error("lcd_contrast");
	}
}

/** **************************************************************************************************************
 * 以 "段" 的方式設定明暗度
 *
 * @param	char			step				明暗的 "段" 值(0 ~ 2)
 */
void lcd_contrast_step(const uint8_t step)
{
	lcd_contrast(G_ary_lcd_contrast[step]);
}

/** **************************************************************************************************************
 * 透過設定反白的方式來表達螢幕閃爍, 藉以提醒 user 有異常情況發生
 *
 * 注意!
 * 螢幕反白的方式在目前這塊 SSD1306(128*64) 耗電蠻大的! 經由 LM2596 降壓至 3.2V 後, 只要螢幕反白就會有大約 0.1 ~ 0.2V 的壓降產生! 或許併接 1 顆電容會比較好...?
 * ->併接 0.33uF 確實改善壓降問題, 不過似乎會造成 SSD1306 "當掉" 的樣子?!! 這個方式(或許方法不對)的穩定性很低...
 *
 * @param	char			enable				閃爍旗標; 0:關閉, 1:閃爍, 2:恢復原設定的螢幕亮度
 */
void lcd_flash(char enable)
{
	if (enable == 2)							// *** 不閃爍?
	{
		lcd_contrast(G_ary_lcd_contrast[G_status.scr_contrast]);	// Set back the Brightness

		return;
	}

	lcd_contrast(G_ary_lcd_contrast[enable ? 2 : 0]);
}

/** **************************************************************************************************************
 * 清除 LCD 上的所有內容(有條件)
 *
 * @param	boolean			full			true:清除全螢幕, false:僅清除 page0 ~ page6
 */
void lcd_clear(const bool full)
{
	uint8_t i, j, k;

	lcd_xy(0, 0);

	/*
	 * 經過實際測試, 目前 i2c_t3 單次可以送出 64 bytes; 1024 bytes 需要分 16 次傳送
	 */
	for (i = 0, k = (full ? 16 : 14); i < k; i++)
	{
		Wire.beginTransmission(D_LCD_ADDR);
		Wire.write(0x40);						// data mode

		for (j = 0; j < 64; j++)
		{
			Wire.write(0);
		}

		if (Wire.endTransmission(I2C_STOP, D_I2C_TIMEOUT) != 0)
		{
			lcd_error("lcd_clear");

			break;
		}
	}
	
	Wire.finish();
}

/** **************************************************************************************************************
 * 輸出指定的字串
 *
 * @param	string			str				要輸出的字串
 */
void lcd_str(const char *str)
{
	Wire.beginTransmission(D_LCD_ADDR);					// begin transmitting
	Wire.write(0x40);							// data mode

	while (*str)
	{
		Wire.write((uint8_t *)&G_ary_lcd_fnt_8x8[(uint8_t)*str++], 8);
	}

	if (Wire.endTransmission(I2C_STOP, D_I2C_TIMEOUT) == 0)			// *** success transmitting?
	{
		Wire.finish();							// loops until Tx/Rx is complete
	}
	else									// *** timeout
	{
		lcd_error("lcd_str");
	}
}

/** **************************************************************************************************************
 * 輸出指定的字串在指定的位置上
 *
 * @param	string			str				要輸出的字串
 * @param	uint8_t			x				行
 * @param	uint8_t			y				列
 */
void lcd_strxy(const char *str, uint8_t x, uint8_t y)
{
	lcd_xy(x, y);
	lcd_str(str);
}

/** **************************************************************************************************************
 * 輸出指定的字元(自指定陣列)
 *
 * @param	uint8_t			ary				要輸出的字元陣列
 * @param	int			len				陣列長度
 */
void lcd_ary(const uint8_t *ary, const int len)
{
	Wire.beginTransmission(D_LCD_ADDR);					// begin transmitting
	Wire.write(0x40);							// data mode
	Wire.write((uint8_t *)ary, len);

	if (Wire.endTransmission(I2C_STOP, D_I2C_TIMEOUT) == 0)			// *** success transmitting?
	{
		Wire.finish();							// loops until Tx/Rx is complete
	}
	else									// *** timeout
	{
		lcd_error("lcd_ary");
	}
}

/** **************************************************************************************************************
 * 輸出自訂的特殊字元 - dot
 *
 * @param	int			pos				字元位址
 */
void lcd_dot(const int pos)
{
	lcd_ary(G_ary_lcd_dot[pos], 8);
}

/** **************************************************************************************************************
 * 輸出自訂的特殊字元 - h. bar
 *
 * @param	int			pos				字元位址
 */
void lcd_hbar(const int pos)
{
	lcd_ary(G_ary_lcd_hbar[pos], 8);
}

/** **************************************************************************************************************
 * 輸出自訂的特殊字元 - v. bar
 *
 * @param	int			pos				字元位址
 */
void lcd_vbar(const int pos)
{
	lcd_ary(G_ary_lcd_vbar[pos], 8);
}

/** **************************************************************************************************************
 * 輸出自訂的特殊字元 - battery level
 *
 * @param	int			pos				字元位址
 */
void lcd_icon_bat(const int pos)
{
	lcd_ary(G_ary_lcd_bat[pos], 8);
}

/** **************************************************************************************************************
 * 輸出自訂的特殊字元(icon)
 *
 * @param	uint8_t			idx				icon 索引碼
 * @param	boolean			on				顯示旗標
 */
void lcd_icon(const uint8_t idx, const bool on)
{
	on ? lcd_ary(G_ary_lcd_icon_8x8[idx], 8) : lcd_str(" ");
}

/** **************************************************************************************************************
 * 移動游標至指定座標位置
 *
 * @param	uint8_t			x				行
 * @param	uint8_t			y				列
 */
void lcd_xy(uint8_t x, uint8_t y)
{
	lcd_cmd(0xb0 + y);							// set page address
	lcd_cmd(0x00 + (8 * x & 0x0f));						// set low x address
	lcd_cmd(0x10 + ((8 * x >> 4) & 0x0f));					// set high x address
}

/** **************************************************************************************************************
 * inverse display
 *
 * @param	boolean			sw				inverse flag - true: inverse, false: normal
 */
void lcd_inverse(bool sw)
{
	lcd_cmd(sw ? 0xa7 : 0xa6);
}

/** **************************************************************************************************************
 * 依據取得的錯誤碼輸出相對的說明至 Console
 *
 * @param	string			func				發生問題的 function name
 */
void lcd_error(const char *func)
{
	DP(func);
	DP("(): ");

	switch (Wire.getError())
	{
		case 1 :							// *** data too long
			DPL("data too long");
			break;

		case 2 :							// *** recv addr NACK
			DPL("recv addr NACK");
			break;

		case 3 :							// *** recv data NACK
			DPL("recv data NACK");
			break;

		case 4 :							// *** other error
			DPL("other error");
			break;
	}
}

/* *************************************************************************************************************** */
